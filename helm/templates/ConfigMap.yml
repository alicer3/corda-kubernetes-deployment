apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.config.resourceName }}-corda-configmap
  labels:
    app: {{ .Values.config.resourceName }}-configmap
    group: {{ .Values.config.resourceName }}
    env: {{ .Values.config.env }}
data:
  node.conf: |+
{{- $filename := (printf "%s-%s%s" "files/conf/node" .Values.setup.cordaVersion ".conf") }}
{{- $file := .Files.Get $filename }}
{{- if $file }}
{{ tpl ($file) . | indent 4 }}
{{- else }}
{{ printf "ERROR: File not found %s, this probably means you are targetting a version of Corda that does not have an assigned node-<version>.conf file, you can in most cases just copy another version (the closest version you can find, eg for 4.4, choose 4.3, for 4.4.2, choose 4.4) of the node.conf file and name it accordingly." $filename }}
{{- end }}
  ping.sh: |+
{{ tpl (.Files.Get "files/ping.sh") . | indent 4 }}
  init_database.sql:
    CREATE TABLE public.todos
    (
    id SERIAL PRIMARY KEY,
    task text NOT NULL,
    "user" text NOT NULL,
    due_date date NOT NULL,
    done boolean NOT NULL DEFAULT FALSE
    )

    TABLESPACE pg_default;

    ALTER TABLE public.todos
    OWNER to pguser;
binaryData:
  networkRootTrustStore.jks:
{{ .Files.Get "files/network/networkRootTrustStore.jks" | b64enc | quote | indent 4 }}   
  network-parameters.file:
{{ .Files.Get "files/network/network-parameters.file" | b64enc | quote | indent 4 }}
{{- $root := .}}
{{- range $path, $bytes := .Files.Glob "files/certificates/firewall_tunnel/**.jks" }}
{{ $path | base | indent 2 }}:
{{ $root.Files.Get $path | b64enc | quote | indent 4  }}
{{- end }}
{{- $certfolder := (printf "%s%s%s" "files/certificates/node/" .Values.config.resourceName "/**.jks") }}
{{- range $path, $bytes := .Files.Glob $certfolder }}
{{ $path | base | indent 2 }}:
{{ $root.Files.Get $path | b64enc | quote | indent 4  }}
{{- end }}
